use super::*;
use ciborium::Value;
use coset::{iana, AsCborValue, CoseKey, KeyType, Label, RegisteredLabel};
use ecdsa::{elliptic_curve::consts::{U32, U48, U66}, signature::Verifier, EncodedPoint};
use p256::NistP256;
use p384::NistP384;
use p521::NistP521;
use sha2::{digest::generic_array::GenericArray, Digest, Sha256, Sha384, Sha512};

const IANA_KEY_TYPE_EC2: KeyType = RegisteredLabel::Assigned(iana::KeyType::EC2);
const IANA_EC2_KEY_PARAM_CRV: i64 = iana::Ec2KeyParameter::Crv as i64;
const IANA_EC2_KEY_PARAM_X: i64 = iana::Ec2KeyParameter::X as i64;
const IANA_EC2_KEY_PARAM_Y: i64 = iana::Ec2KeyParameter::Y as i64;
const IANA_EC2_CURVE_P256: i128 = iana::EllipticCurve::P_256 as i128;
const IANA_EC2_CURVE_P384: i128 = iana::EllipticCurve::P_384 as i128;
const IANA_EC2_CURVE_P521: i128 = iana::EllipticCurve::P_521 as i128;

enum SigningAlgorithm
{
    // sha256 + secp256r1/prime256v1/P-256
    ES256,
    // sha384 + secp384r1/P-384
    ES384,
    // sha512 + secp521r1/P-521
    ES512,
}

impl TryFrom<coset::Algorithm> for SigningAlgorithm
{
    type Error = TokenError;

    fn try_from(alg: coset::Algorithm) -> Result<Self, Self::Error>
    {
        match alg {
            coset::Algorithm::Assigned(coset::iana::Algorithm::ES256) => Ok(SigningAlgorithm::ES256),
            coset::Algorithm::Assigned(coset::iana::Algorithm::ES384) => Ok(SigningAlgorithm::ES384),
            coset::Algorithm::Assigned(coset::iana::Algorithm::ES512) => Ok(SigningAlgorithm::ES512),
            unknown => Err(TokenError::InvalidAlgorithm(Some(unknown))),
        }
    }
}

impl TryFrom<&str> for SigningAlgorithm
{
    type Error = TokenError;

    fn try_from(alg: &str) -> Result<Self, Self::Error>
    {
        match alg {
            "sha-256" => Ok(SigningAlgorithm::ES256),
            "sha-384" => Ok(SigningAlgorithm::ES384),
            "sha-512" => Ok(SigningAlgorithm::ES512),
            _ => Err(TokenError::InvalidTokenFormat("invalid hash algorithm")),
        }
    }
}

struct RustCryptoVerifier
{
    algorithm: SigningAlgorithm,
    key_public_raw: Vec<u8>,
}

impl RustCryptoVerifier
{
    fn new(algorithm: SigningAlgorithm, key_public: &[u8]) -> Self
    {
        Self {
            algorithm,
            key_public_raw: key_public.to_vec(),
        }
    }

    fn verify(&self, sig: &[u8], data: &[u8]) -> Result<(), TokenError>
    {
        match self.algorithm {
            SigningAlgorithm::ES256 => {
                let key = p256::ecdsa::VerifyingKey::from_sec1_bytes(&self.key_public_raw)?;
                let sig = p256::ecdsa::Signature::from_slice(sig)?;
                key.verify(data, &sig)?;
            }
            SigningAlgorithm::ES384 => {
                let key = p384::ecdsa::VerifyingKey::from_sec1_bytes(&self.key_public_raw)?;
                let sig = p384::ecdsa::Signature::from_slice(sig)?;
                key.verify(data, &sig)?;
            }
            SigningAlgorithm::ES512 => {
                let key = p521::ecdsa::VerifyingKey::from_sec1_bytes(&self.key_public_raw)?;
                let sig = p521::ecdsa::Signature::from_slice(sig)?;
                key.verify(data, &sig)?;
            }
        }
        Ok(())
    }
}

pub(crate) fn cose_key_to_sec1(key: &[u8]) -> Result<Vec<u8>, TokenError>
{
    let val = de::from_reader(key)?;
    let cose_key = CoseKey::from_cbor_value(val)?;
    if cose_key.kty != IANA_KEY_TYPE_EC2 {
        return Err(TokenError::InvalidTokenFormat("Realm public key not EC2"));
    }

    let mut alg: Option<i128> = None;
    let mut x: Option<Vec<u8>> = None;
    let mut y: Option<Vec<u8>> = None;

    for pair in cose_key.params {
        match pair {
            (Label::Int(IANA_EC2_KEY_PARAM_CRV), Value::Integer(i)) => { alg.replace(i.into()); },
            (Label::Int(IANA_EC2_KEY_PARAM_X), Value::Bytes(x_param)) => { x.replace(x_param); },
            (Label::Int(IANA_EC2_KEY_PARAM_Y), Value::Bytes(y_param)) => { y.replace(y_param); },
            _ => ()   // ignore all the rest, match below will verify
        }
    }

    let key = match (alg, x, y) {
        (Some(IANA_EC2_CURVE_P256), Some(x), Some(y)) => {
            let x_bytes: &GenericArray<_, U32> = GenericArray::from_slice(&x);
            let y_bytes: &GenericArray<_, U32> = GenericArray::from_slice(&y);
            let ep = EncodedPoint::<NistP256>::from_affine_coordinates(x_bytes, y_bytes, false);
            ep.as_bytes().to_vec()
        },
        (Some(IANA_EC2_CURVE_P384), Some(x), Some(y)) => {
            let x_bytes: &GenericArray<_, U48> = GenericArray::from_slice(&x);
            let y_bytes: &GenericArray<_, U48> = GenericArray::from_slice(&y);
            let ep = EncodedPoint::<NistP384>::from_affine_coordinates(x_bytes, y_bytes, false);
            ep.as_bytes().to_vec()
        },
        (Some(IANA_EC2_CURVE_P521), Some(x), Some(y)) => {
            let x_bytes: &GenericArray<_, U66> = GenericArray::from_slice(&x);
            let y_bytes: &GenericArray<_, U66> = GenericArray::from_slice(&y);
            let ep = EncodedPoint::<NistP521>::from_affine_coordinates(x_bytes, y_bytes, false);
            ep.as_bytes().to_vec()
        },
        _ => return Err(TokenError::InvalidTokenFormat("Wrong realm public key format")),
    };

    Ok(key)
}

pub(crate) fn verify_coset_signature(cose: &CoseSign1, key_pub: &[u8], aad: &[u8]) -> Result<(), TokenError>
{
    if cose.protected.header.alg.is_none() {
        return Err(TokenError::InvalidAlgorithm(None));
    }
    let alg = cose.protected.header.alg.as_ref().unwrap().clone().try_into()?;
    let verifier = RustCryptoVerifier::new(alg, &key_pub);
    cose.verify_signature(aad, |sig, data| verifier.verify(sig, data))
}

pub(crate) fn verify_digest(data: &[u8], hash: &[u8], alg: &str) -> Result<(), TokenError>
{
    let algorithm = alg.try_into()?;

    let digest = match algorithm {
        SigningAlgorithm::ES256 => {
            let mut hasher = Sha256::new();
            hasher.update(data);
            hasher.finalize().to_vec()
        }
        SigningAlgorithm::ES384 => {
            let mut hasher = Sha384::new();
            hasher.update(data);
            hasher.finalize().to_vec()
        }
        SigningAlgorithm::ES512 => {
            let mut hasher = Sha512::new();
            hasher.update(data);
            hasher.finalize().to_vec()
        }
    };

    println!("Hash: {}", hex::encode(&hash));
    println!("Dgst: {}", hex::encode(&digest));

    #[cfg(not(feature = "disable-challenge"))]
    if digest != hash {
        return Err(TokenError::VerificationFailed("challenge verification failed"));
    }

    Ok(())
}

#[cfg(test)]
mod tests
{
    use super::*;

    #[test]
    fn verify_digest_es256()
    {
        static DATA: &[u8] = b"data";
        static HASH_ES256: &[u8] = &[
            0x3a, 0x6e, 0xb0, 0x79, 0x0f, 0x39, 0xac, 0x87, 0xc9, 0x4f, 0x38, 0x56, 0xb2, 0xdd, 0x2c, 0x5d,
            0x11, 0x0e, 0x68, 0x11, 0x60, 0x22, 0x61, 0xa9, 0xa9, 0x23, 0xd3, 0xbb, 0x23, 0xad, 0xc8, 0xb7,
        ];
        static HASH_ES256_BAD: &[u8] = &[
            0xbe, 0xef, 0xb0, 0x79, 0x0f, 0x39, 0xac, 0x87, 0xc9, 0x4f, 0x38, 0x56, 0xb2, 0xdd, 0x2c, 0x5d,
            0x11, 0x0e, 0x68, 0x11, 0x60, 0x22, 0x61, 0xa9, 0xa9, 0x23, 0xd3, 0xbb, 0x23, 0xad, 0xc8, 0xb7,
        ];

        assert_eq!(verify_digest(DATA, HASH_ES256, "sha-256"), Ok(()));
        assert_eq!(verify_digest(DATA, HASH_ES256_BAD, "sha-256"), Err(TokenError::VerificationFailed("challenge verification failed")));
    }

    #[test]
    fn verify_digest_es384()
    {
        static DATA: &[u8] = b"data";
        static HASH_ES384: &[u8] = &[
            0x20, 0x39, 0xe0, 0xf0, 0xb9, 0x27, 0x28, 0x49, 0x9f, 0xb8, 0x8e, 0x23, 0xeb, 0xc3, 0xcf, 0xd0,
            0x55, 0x4b, 0x28, 0x40, 0x0b, 0x0e, 0xd7, 0xb7, 0x53, 0x05, 0x5c, 0x88, 0xb5, 0x86, 0x5c, 0x3c,
            0x2a, 0xa7, 0x2c, 0x6a, 0x1a, 0x9a, 0xe0, 0xa7, 0x55, 0xd8, 0x79, 0x00, 0xa4, 0xa6, 0xff, 0x41
        ];
        static HASH_ES384_BAD: &[u8] = &[
            0xbe, 0xef, 0xe0, 0xf0, 0xb9, 0x27, 0x28, 0x49, 0x9f, 0xb8, 0x8e, 0x23, 0xeb, 0xc3, 0xcf, 0xd0,
            0x55, 0x4b, 0x28, 0x40, 0x0b, 0x0e, 0xd7, 0xb7, 0x53, 0x05, 0x5c, 0x88, 0xb5, 0x86, 0x5c, 0x3c,
            0x2a, 0xa7, 0x2c, 0x6a, 0x1a, 0x9a, 0xe0, 0xa7, 0x55, 0xd8, 0x79, 0x00, 0xa4, 0xa6, 0xff, 0x41
        ];

        assert_eq!(verify_digest(DATA, HASH_ES384, "sha-384"), Ok(()));
        assert_eq!(verify_digest(DATA, HASH_ES384_BAD, "sha-384"), Err(TokenError::VerificationFailed("challenge verification failed")));
    }

    #[test]
    fn verify_digest_es512()
    {
        static DATA: &[u8] = b"data";
        static HASH_ES512: &[u8] = &[
            0x77, 0xc7, 0xce, 0x9a, 0x5d, 0x86, 0xbb, 0x38, 0x6d, 0x44, 0x3b, 0xb9, 0x63, 0x90, 0xfa, 0xa1,
            0x20, 0x63, 0x31, 0x58, 0x69, 0x9c, 0x88, 0x44, 0xc3, 0x0b, 0x13, 0xab, 0x0b, 0xf9, 0x27, 0x60,
            0xb7, 0xe4, 0x41, 0x6a, 0xea, 0x39, 0x7d, 0xb9, 0x1b, 0x4a, 0xc0, 0xe5, 0xdd, 0x56, 0xb8, 0xef,
            0x7e, 0x4b, 0x06, 0x61, 0x62, 0xab, 0x1f, 0xdc, 0x08, 0x83, 0x19, 0xce, 0x6d, 0xef, 0xc8, 0x76
        ];
        static HASH_ES512_BAD: &[u8] = &[
            0xbe, 0xef, 0xce, 0x9a, 0x5d, 0x86, 0xbb, 0x38, 0x6d, 0x44, 0x3b, 0xb9, 0x63, 0x90, 0xfa, 0xa1,
            0x20, 0x63, 0x31, 0x58, 0x69, 0x9c, 0x88, 0x44, 0xc3, 0x0b, 0x13, 0xab, 0x0b, 0xf9, 0x27, 0x60,
            0xb7, 0xe4, 0x41, 0x6a, 0xea, 0x39, 0x7d, 0xb9, 0x1b, 0x4a, 0xc0, 0xe5, 0xdd, 0x56, 0xb8, 0xef,
            0x7e, 0x4b, 0x06, 0x61, 0x62, 0xab, 0x1f, 0xdc, 0x08, 0x83, 0x19, 0xce, 0x6d, 0xef, 0xc8, 0x76
        ];

        assert_eq!(verify_digest(DATA, HASH_ES512, "sha-512"), Ok(()));
        assert_eq!(verify_digest(DATA, HASH_ES512_BAD, "sha-512"), Err(TokenError::VerificationFailed("challenge verification failed")));
    }

    #[test]
    fn verify_rust_crypto_prime256v1()
    {
        static DATA: &[u8] = b"data";
        static PUBLIC: &[u8] = &[
            0x04, 0x54, 0x86, 0xE0, 0x9D, 0x06, 0x55, 0xFC, 0x7F, 0xF6, 0x5C, 0x2F,
            0x45, 0xC0, 0xAF, 0xDE, 0x3B, 0xEA, 0x65, 0xCB, 0x79, 0x7F, 0xA8, 0xA1,
            0xB1, 0xC8, 0xB2, 0xF4, 0xAD, 0xC3, 0x4B, 0x53, 0xB9, 0xD2, 0x8F, 0x1C,
            0x69, 0xB4, 0xAE, 0x81, 0x35, 0x7E, 0x87, 0x0C, 0xDA, 0x44, 0xEF, 0x47,
            0xB2, 0x74, 0xCC, 0x0D, 0x7F, 0xA5, 0xE8, 0x5E, 0xBB, 0xD9, 0xD6, 0xCF,
            0x5B, 0x0E, 0xDE, 0x54, 0x92
        ];
        static PUBLIC_BAD: &[u8] = &[
            0x04, 0x54, 0x86, 0xE0, 0x9D, 0x06, 0x55, 0xFC, 0x7F, 0xF6, 0xBE, 0xEF,
            0x45, 0xC0, 0xAF, 0xDE, 0x3B, 0xEA, 0x65, 0xCB, 0x79, 0x7F, 0xA8, 0xA1,
            0xB1, 0xC8, 0xB2, 0xF4, 0xAD, 0xC3, 0x4B, 0x53, 0xB9, 0xD2, 0x8F, 0x1C,
            0x69, 0xB4, 0xAE, 0x81, 0x35, 0x7E, 0x87, 0x0C, 0xDA, 0x44, 0xEF, 0x47,
            0xB2, 0x74, 0xCC, 0x0D, 0x7F, 0xA5, 0xE8, 0x5E, 0xBB, 0xD9, 0xD6, 0xCF,
            0x5B, 0x0E, 0xDE, 0x54, 0x92
        ];
        static SIG: &[u8] = &[
            0xF6, 0xD9, 0x91, 0xA0, 0xE3, 0x96, 0xCB, 0x41, 0xFE, 0xF4, 0xAC, 0x75,
            0xF2, 0xBA, 0xBB, 0xE9, 0x1B, 0xA3, 0xAE, 0x48, 0xB3, 0xE5, 0x99, 0x9B,
            0xAA, 0x2E, 0x02, 0xF6, 0x82, 0x8B, 0x72, 0x63, 0x99, 0xE8, 0x29, 0xE4,
            0xE5, 0xEF, 0xF6, 0xC0, 0x72, 0xD4, 0x7E, 0x10, 0x67, 0x0C, 0xD8, 0x56,
            0x4D, 0xF0, 0x2E, 0x4B, 0x7A, 0x59, 0xAD, 0xC8, 0x12, 0x70, 0xDE, 0xA1,
            0x38, 0xB8, 0x0E, 0x5E
        ];
        static SIG_BAD: &[u8] = &[
            0xF6, 0xD9, 0x91, 0xA0, 0xE3, 0x96, 0xCB, 0x41, 0xFE, 0xF4, 0xBE, 0xEF,
            0xF2, 0xBA, 0xBB, 0xE9, 0x1B, 0xA3, 0xAE, 0x48, 0xB3, 0xE5, 0x99, 0x9B,
            0xAA, 0x2E, 0x02, 0xF6, 0x82, 0x8B, 0x72, 0x63, 0x99, 0xE8, 0x29, 0xE4,
            0xE5, 0xEF, 0xF6, 0xC0, 0x72, 0xD4, 0x7E, 0x10, 0x67, 0x0C, 0xD8, 0x56,
            0x4D, 0xF0, 0x2E, 0x4B, 0x7A, 0x59, 0xAD, 0xC8, 0x12, 0x70, 0xDE, 0xA1,
            0x38, 0xB8, 0x0E, 0x5E
        ];

        let c = RustCryptoVerifier::new(SigningAlgorithm::ES256, PUBLIC);
        assert_eq!(c.verify(SIG, DATA), Ok(()));
        assert_eq!(c.verify(SIG_BAD, DATA), Err(TokenError::Ecdsa(ecdsa::Error::new())));

        let c = RustCryptoVerifier::new(SigningAlgorithm::ES256, PUBLIC_BAD);
        assert_eq!(c.verify(SIG, DATA), Err(TokenError::Ecdsa(ecdsa::Error::new())));
    }

    #[test]
    fn verify_rust_crypto_secp384r1()
    {
        static DATA: &[u8] = b"data";
        static PUBLIC: &[u8] = &[
            0x04, 0xF1, 0x6B, 0xF4, 0xD3, 0xAB, 0x96, 0xB3, 0x62, 0xBD, 0x1E, 0x11,
            0x0C, 0x3B, 0x43, 0x74, 0x23, 0x44, 0x18, 0xFF, 0xC2, 0x9B, 0xDA, 0xEA,
            0xD7, 0xC9, 0x80, 0x6C, 0x63, 0x70, 0x1C, 0xA9, 0xB9, 0x6C, 0x68, 0x36,
            0x1D, 0xBA, 0x85, 0xDA, 0x56, 0xD1, 0xBF, 0x04, 0xA6, 0xAD, 0x68, 0xBC,
            0x86, 0xEE, 0x1E, 0x36, 0xC5, 0x91, 0xCC, 0x04, 0x46, 0x93, 0x90, 0x50,
            0x35, 0x65, 0x2A, 0xEA, 0x17, 0x00, 0x38, 0x2F, 0x11, 0xA5, 0x9E, 0x7C,
            0x87, 0x4B, 0xC1, 0x37, 0x25, 0x00, 0x75, 0x1B, 0xF4, 0xB5, 0x70, 0xF2,
            0xC0, 0x60, 0x6F, 0x2F, 0x56, 0x70, 0x9F, 0xC7, 0x11, 0x8B, 0x1B, 0x54, 0xCF
        ];
        static PUBLIC_BAD: &[u8] = &[
            0x04, 0xF1, 0x6B, 0xF4, 0xD3, 0xAB, 0x96, 0xB3, 0x62, 0xBD, 0xBE, 0xEF,
            0x0C, 0x3B, 0x43, 0x74, 0x23, 0x44, 0x18, 0xFF, 0xC2, 0x9B, 0xDA, 0xEA,
            0xD7, 0xC9, 0x80, 0x6C, 0x63, 0x70, 0x1C, 0xA9, 0xB9, 0x6C, 0x68, 0x36,
            0x1D, 0xBA, 0x85, 0xDA, 0x56, 0xD1, 0xBF, 0x04, 0xA6, 0xAD, 0x68, 0xBC,
            0x86, 0xEE, 0x1E, 0x36, 0xC5, 0x91, 0xCC, 0x04, 0x46, 0x93, 0x90, 0x50,
            0x35, 0x65, 0x2A, 0xEA, 0x17, 0x00, 0x38, 0x2F, 0x11, 0xA5, 0x9E, 0x7C,
            0x87, 0x4B, 0xC1, 0x37, 0x25, 0x00, 0x75, 0x1B, 0xF4, 0xB5, 0x70, 0xF2,
            0xC0, 0x60, 0x6F, 0x2F, 0x56, 0x70, 0x9F, 0xC7, 0x11, 0x8B, 0x1B, 0x54, 0xCF
        ];
        static SIG: &[u8] = &[
            0x72, 0x41, 0x6A, 0x98, 0x0B, 0x51, 0x31, 0x2A, 0x20, 0xF2, 0xA5, 0x9E,
            0x23, 0xD8, 0x5D, 0xCB, 0x44, 0x6C, 0xCB, 0xA0, 0x88, 0x87, 0x43, 0x2A,
            0x3D, 0xDC, 0xCC, 0x58, 0x9D, 0x1C, 0xCF, 0x0A, 0x5C, 0xEB, 0xC1, 0xF9,
            0x11, 0x51, 0xD7, 0xEB, 0xC6, 0x17, 0x7F, 0xC0, 0x66, 0x51, 0x2E, 0x86,
            0xDC, 0x41, 0x19, 0x6D, 0xB8, 0x46, 0xE5, 0xB8, 0x93, 0x7A, 0xCE, 0xC4,
            0x2C, 0x99, 0xFD, 0x75, 0x9D, 0x10, 0x66, 0xE5, 0xA0, 0x50, 0x25, 0x80,
            0xA1, 0xF6, 0xE4, 0x42, 0xF5, 0xB2, 0x21, 0xF1, 0x72, 0x76, 0xAE, 0x6C,
            0x6E, 0xC9, 0xEE, 0x8C, 0x30, 0x4B, 0xFB, 0x2A, 0x79, 0x05, 0xFD, 0x6D
        ];
        static SIG_BAD: &[u8] = &[
            0x72, 0x41, 0x6A, 0x98, 0x0B, 0x51, 0x31, 0x2A, 0x20, 0xF2, 0xBE, 0xEF,
            0x23, 0xD8, 0x5D, 0xCB, 0x44, 0x6C, 0xCB, 0xA0, 0x88, 0x87, 0x43, 0x2A,
            0x3D, 0xDC, 0xCC, 0x58, 0x9D, 0x1C, 0xCF, 0x0A, 0x5C, 0xEB, 0xC1, 0xF9,
            0x11, 0x51, 0xD7, 0xEB, 0xC6, 0x17, 0x7F, 0xC0, 0x66, 0x51, 0x2E, 0x86,
            0xDC, 0x41, 0x19, 0x6D, 0xB8, 0x46, 0xE5, 0xB8, 0x93, 0x7A, 0xCE, 0xC4,
            0x2C, 0x99, 0xFD, 0x75, 0x9D, 0x10, 0x66, 0xE5, 0xA0, 0x50, 0x25, 0x80,
            0xA1, 0xF6, 0xE4, 0x42, 0xF5, 0xB2, 0x21, 0xF1, 0x72, 0x76, 0xAE, 0x6C,
            0x6E, 0xC9, 0xEE, 0x8C, 0x30, 0x4B, 0xFB, 0x2A, 0x79, 0x05, 0xFD, 0x6D
        ];

        let c = RustCryptoVerifier::new(SigningAlgorithm::ES384, PUBLIC);
        assert_eq!(c.verify(SIG, DATA), Ok(()));
        assert_eq!(c.verify(SIG_BAD, DATA), Err(TokenError::Ecdsa(ecdsa::Error::new())));

        let c = RustCryptoVerifier::new(SigningAlgorithm::ES384, PUBLIC_BAD);
        assert_eq!(c.verify(SIG, DATA), Err(TokenError::Ecdsa(ecdsa::Error::new())));
    }

    #[test]
    fn verify_rust_crypto_secp521r1()
    {
        static DATA: &[u8] = b"data";
        static PUBLIC: &[u8] = &[
            0x04, 0x00, 0x29, 0xAA, 0x00, 0x54, 0x30, 0xEA, 0x5D, 0xED, 0xE5, 0x72,
            0x88, 0xD9, 0xF5, 0x5A, 0x3C, 0x7E, 0x0F, 0x82, 0x91, 0x55, 0x2F, 0x60,
            0xB7, 0x9A, 0x45, 0x2F, 0x42, 0x23, 0x76, 0xC8, 0x9B, 0x54, 0xAC, 0x73,
            0x5C, 0x88, 0x5B, 0xB1, 0xC2, 0xD9, 0x78, 0xE1, 0x9E, 0xDB, 0x16, 0xC8,
            0xAC, 0x98, 0x5D, 0x60, 0x05, 0x60, 0xC4, 0xA7, 0xD7, 0x7B, 0xDD, 0x77,
            0x0C, 0x0A, 0xD7, 0x87, 0xC3, 0x77, 0xD7, 0x00, 0x6B, 0x06, 0xE8, 0x89,
            0x34, 0xB0, 0xF5, 0xCD, 0x33, 0x0B, 0x7B, 0xBC, 0xDE, 0x7E, 0x3B, 0x4D,
            0x7D, 0xF4, 0xDB, 0xEC, 0x1E, 0xF0, 0x5A, 0x00, 0x24, 0x0E, 0x56, 0x0D,
            0xEA, 0x8A, 0xB0, 0x0D, 0x16, 0x8E, 0xEC, 0x71, 0x3B, 0x15, 0x0A, 0x18,
            0x41, 0xC0, 0x37, 0xCB, 0x13, 0x22, 0xD5, 0xF2, 0x72, 0x25, 0xAC, 0x1B,
            0xF2, 0x54, 0xD1, 0x9D, 0x10, 0xAF, 0x36, 0x23, 0x23, 0x2A, 0x31, 0x8F, 0x60
        ];
        static PUBLIC_BAD: &[u8] = &[
            0x04, 0x00, 0x29, 0xAA, 0x00, 0x54, 0x30, 0xEA, 0x5D, 0xED, 0xBE, 0xEF,
            0x88, 0xD9, 0xF5, 0x5A, 0x3C, 0x7E, 0x0F, 0x82, 0x91, 0x55, 0x2F, 0x60,
            0xB7, 0x9A, 0x45, 0x2F, 0x42, 0x23, 0x76, 0xC8, 0x9B, 0x54, 0xAC, 0x73,
            0x5C, 0x88, 0x5B, 0xB1, 0xC2, 0xD9, 0x78, 0xE1, 0x9E, 0xDB, 0x16, 0xC8,
            0xAC, 0x98, 0x5D, 0x60, 0x05, 0x60, 0xC4, 0xA7, 0xD7, 0x7B, 0xDD, 0x77,
            0x0C, 0x0A, 0xD7, 0x87, 0xC3, 0x77, 0xD7, 0x00, 0x6B, 0x06, 0xE8, 0x89,
            0x34, 0xB0, 0xF5, 0xCD, 0x33, 0x0B, 0x7B, 0xBC, 0xDE, 0x7E, 0x3B, 0x4D,
            0x7D, 0xF4, 0xDB, 0xEC, 0x1E, 0xF0, 0x5A, 0x00, 0x24, 0x0E, 0x56, 0x0D,
            0xEA, 0x8A, 0xB0, 0x0D, 0x16, 0x8E, 0xEC, 0x71, 0x3B, 0x15, 0x0A, 0x18,
            0x41, 0xC0, 0x37, 0xCB, 0x13, 0x22, 0xD5, 0xF2, 0x72, 0x25, 0xAC, 0x1B,
            0xF2, 0x54, 0xD1, 0x9D, 0x10, 0xAF, 0x36, 0x23, 0x23, 0x2A, 0x31, 0x8F, 0x60
        ];
        static SIG: &[u8] = &[
            0x00, 0x79, 0x82, 0x12, 0x18, 0xA3, 0x43, 0x05, 0xF5, 0xE4, 0x98, 0x9D,
            0xC2, 0xD7, 0xF7, 0x3B, 0x67, 0xAA, 0x1D, 0x69, 0x11, 0xCB, 0x1D, 0x46,
            0xA3, 0x53, 0x3F, 0xFF, 0xB7, 0x26, 0x11, 0x46, 0xE6, 0x6E, 0x65, 0xDB,
            0xE7, 0x96, 0x53, 0x50, 0x07, 0x39, 0x01, 0xBA, 0xC2, 0x85, 0x37, 0xF1,
            0xD3, 0x8E, 0x2D, 0x05, 0xCC, 0x4C, 0x49, 0x60, 0x44, 0xEB, 0xB6, 0xDD,
            0x14, 0xDF, 0x61, 0x29, 0x40, 0x96, 0x01, 0xD9, 0x39, 0x19, 0x93, 0xAE,
            0xA5, 0xAB, 0xCF, 0x76, 0x0C, 0x6F, 0x8E, 0x88, 0x7F, 0xB4, 0x37, 0x99,
            0x46, 0xAA, 0xAE, 0x3F, 0x1A, 0x24, 0xE8, 0x7C, 0xFF, 0xE5, 0x72, 0x30,
            0xCC, 0x02, 0xEA, 0xB0, 0xEA, 0x40, 0x8C, 0xFA, 0x9F, 0x6F, 0x2C, 0x22,
            0xD1, 0x87, 0xDE, 0x9C, 0x89, 0xC7, 0x13, 0xFB, 0x7E, 0x92, 0xE0, 0xAF,
            0x25, 0xED, 0x6C, 0x67, 0x7B, 0x24, 0x4D, 0xC8, 0x96, 0x71, 0xCA, 0x1F
        ];
        static SIG_BAD: &[u8] = &[
            0x00, 0x79, 0x82, 0x12, 0x18, 0xA3, 0x43, 0x05, 0xF5, 0xE4, 0xBE, 0xEF,
            0xC2, 0xD7, 0xF7, 0x3B, 0x67, 0xAA, 0x1D, 0x69, 0x11, 0xCB, 0x1D, 0x46,
            0xA3, 0x53, 0x3F, 0xFF, 0xB7, 0x26, 0x11, 0x46, 0xE6, 0x6E, 0x65, 0xDB,
            0xE7, 0x96, 0x53, 0x50, 0x07, 0x39, 0x01, 0xBA, 0xC2, 0x85, 0x37, 0xF1,
            0xD3, 0x8E, 0x2D, 0x05, 0xCC, 0x4C, 0x49, 0x60, 0x44, 0xEB, 0xB6, 0xDD,
            0x14, 0xDF, 0x61, 0x29, 0x40, 0x96, 0x01, 0xD9, 0x39, 0x19, 0x93, 0xAE,
            0xA5, 0xAB, 0xCF, 0x76, 0x0C, 0x6F, 0x8E, 0x88, 0x7F, 0xB4, 0x37, 0x99,
            0x46, 0xAA, 0xAE, 0x3F, 0x1A, 0x24, 0xE8, 0x7C, 0xFF, 0xE5, 0x72, 0x30,
            0xCC, 0x02, 0xEA, 0xB0, 0xEA, 0x40, 0x8C, 0xFA, 0x9F, 0x6F, 0x2C, 0x22,
            0xD1, 0x87, 0xDE, 0x9C, 0x89, 0xC7, 0x13, 0xFB, 0x7E, 0x92, 0xE0, 0xAF,
            0x25, 0xED, 0x6C, 0x67, 0x7B, 0x24, 0x4D, 0xC8, 0x96, 0x71, 0xCA, 0x1F
        ];

        let c = RustCryptoVerifier::new(SigningAlgorithm::ES512, PUBLIC);
        assert_eq!(c.verify(SIG, DATA), Ok(()));
        assert_eq!(c.verify(SIG_BAD, DATA), Err(TokenError::Ecdsa(ecdsa::Error::new())));

        let c = RustCryptoVerifier::new(SigningAlgorithm::ES512, PUBLIC_BAD);
        assert_eq!(c.verify(SIG, DATA), Err(TokenError::Ecdsa(ecdsa::Error::new())));
    }
}
